"
I represent a mozilla::gfx::Point structure.
I encode a point on the screen.
My dimension is defined by float x and y coordinates.

Public API and Key Messages

-asPoint - to convert to Pharo Point
- x/x:
- y/y:

   MozNativePoint fromPoint: (50@50)
 
Internal Representation and Key Implementation Points.

	My accessor methods are auto-generated by FFI from structure declaration.
	I am always created on image side and do not require any additional memory management.
"
Class {
	#name : #MozNativePoint,
	#superclass : #FFIExternalStructure,
	#traits : 'TMozLibrary',
	#classTraits : 'TMozLibrary classTrait',
	#classVars : [
		'OFFSET_X',
		'OFFSET_Y'
	],
	#category : 'Sparta-Moz2D-External'
}

{ #category : #converting }
MozNativePoint class >> asExternalTypeOn: generator [
	"use handle ivar to hold my instance"
	^ FFIExternalObjectType objectClass: self
]

{ #category : #'field definition' }
MozNativePoint class >> fieldsDesc [
	"
	self rebuildFieldAccessors
	"
	^ #(
		float x; float y
	)
]

{ #category : #'instance creation' }
MozNativePoint class >> fromPoint: aPoint [

	^ self new
		x: aPoint x;
		y: aPoint y
]

{ #category : #converting }
MozNativePoint >> asPoint [
	^ self x @ self y
]

{ #category : #'accessing structure variables' }
MozNativePoint >> x [
	"This method was automatically generated"
	^handle floatAt: OFFSET_X
]

{ #category : #'accessing structure variables' }
MozNativePoint >> x: anObject [
	"This method was automatically generated"
	handle floatAt: OFFSET_X put: anObject
]

{ #category : #'accessing structure variables' }
MozNativePoint >> y [
	"This method was automatically generated"
	^handle floatAt: OFFSET_Y
]

{ #category : #'accessing structure variables' }
MozNativePoint >> y: anObject [
	"This method was automatically generated"
	handle floatAt: OFFSET_Y put: anObject
]
